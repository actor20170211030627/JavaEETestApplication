#从命名: from application.properties to application.yml
spring:
  main:
    allow-bean-definition-overriding: true
  # 数据源配置
  datasource:
    name: javaee_test_project
    type: com.alibaba.druid.pool.DruidDataSource
    #druid相关配置
    druid:
      #配置监控统计拦截的filters,去掉后监控界面sql将无法统计,'wall'用于防火墙
      filters: stat, wall, log4j
      driver-class-name: com.mysql.jdbc.Driver
      #基本属性
      url: jdbc:mysql://127.0.0.1:3306/javaee_test_project?useUnicode=true&characterEncoding=utf-8&zeroDateTimeBehavior=convertToNull&transformedBitIsBoolean=true&autoReconnect=true&failOverReadOnly=false&useSSL=false&serverTimezone=GMT%2B8
      username: root
      password: 123
      #配置初始化大小/最小/最大
      initial-size: 1
      min-idle: 1
      max-active: 20
      #获取连接等待超时时间
      max-wait: 60000
      #间隔多久进行一次检测，检测需要关闭的空闲连接
      time-between-eviction-runs-millis: 60000
      #一个连接在池中最小生存的时间
      min-evictable-idle-time-millis: 300000
      validation-query: SELECT 'x'
      test-while-idle: true
      test-on-borrow: false
      test-on-return: false
      #打开PSCache，并指定每个连接上PSCache的大小。oracle设为true，mysql设为false。分库分表较多推荐设置为false
      pool-prepared-statements: false
      max-pool-prepared-statement-per-connection-size: 20

# 封装的MyBatis
mybatis-plus:
  # 如果是放在src/main/java目录下 classpath:/com/yourpackage/*/mapper/*Mapper.xml
  # 如果是放在resource目录 classpath:/mapper/*Mapper.xml
  mapper-locations: classpath:mybatis/mappers/*Mapper.xml
  #实体扫描，多个package用逗号或者分号分隔
  typeAliasesPackage: com.actor.javaeetestproject.domain
  global-config:
    #主键类型  0:"数据库ID自增", 1:"用户输入ID",2:"全局唯一ID (数字类型唯一ID)", 3:"全局唯一ID UUID";
    id-type: 0
    #字段策略 0:"忽略判断",1:"非 NULL 判断"),2:"非空判断"
    field-strategy: 1
    #驼峰下划线转换
    #db-column-underline: true
    #刷新mapper 调试神器
    #refresh-mapper: true
    #数据库大写下划线转换
    #capital-mode: true
    # Sequence序列接口实现类配置
    #key-generator: com.baomidou.mybatisplus.incrementer.OracleKeyGenerator
    #逻辑删除配置（下面3个配置）
    #logic-delete-value: 1
    #logic-not-delete-value: 0
    #sql-injector: com.baomidou.mybatisplus.mapper.LogicSqlInjector
    #自定义填充策略接口实现
    #meta-object-handler: com.baomidou.springboot.MyMetaObjectHandler
  configuration:
    map-underscore-to-camel-case: true
    cache-enabled: false
    #配置JdbcTypeForNull
    jdbc-type-for-null: 'null'

  # spring data jpa配置
#  jpa:
#    show-sql: true
#    properties:
#      hibernate:
#        format_sql: true
#    hibernate:
#      # 实体类有更新时，数据库表更新
#      ddl-auto: update
#    database-platform: org.hibernate.dialect.MySQL5InnoDBDialect

  # 消息中间件
#  rabbitmq:
#    host: 192.168.21.141
#    port: 5672
#    username: xxf
#    password: xxf
#    listener:
#      simple:
#        retry:
#          max-attempts: 3
#          enabled: true
#        default-requeue-rejected: true
#    virtual-host: test

  # NoSQL数据库
  redis:
    database: 12
    host: localhost
    password:
    port: 6379

    # 用的Spring封装的连接, 没有用jedis
#    jedis:
#      pool:
#        max-active: 100
#        max-wait: 3000ms
#        max-idle: 100
#        min-idle: 1

  # 文件上传大小限制
  servlet:
    multipart:
      max-file-size: 20MB
      max-request-size: 20MB

  # Spring Cloud(微服务框架) 的负载均衡配置
#feign:
#  httpclient:
#    enabled: true
#  hystrix:
#    enabled: true
#ribbon:
#  ReadTimeout: 300000
#  SocketTimeout: 300000
#  ConnectTimeout: 30000

# Spring Cloud 熔断机制配置(如果当前服务出现问题, 触发解决方案, 比如: 返回假数据, 给后端发邮件...)
#hystrix:
#  command:
#    default:
#      execution:
#        isolation:
#          thread:
#            timeoutInMilliseconds: 300000
#    circuitBreaker:
#      sleepWindowInMilliseconds: 300000
#      forceClosed: true
#  threadpool:
#    default:
#      coreSize: 20 # 线程池coreSize
#      maximumSize: 20 # 在开始不拒绝的最大线程数，Hystrix有bug...即使"达到maxQueueSize"且"coreSize<=当前size<maximumSize"，也不会增加线程数（HystrixThreadPool...isQueueSpaceAvailable）
#      maxQueueSize: 1024  # 请求等待队列（削峰，但worker仍然只有coreSize大小）
#      queueSizeRejectionThreshold: 1024  # 即使未达到maxQueueSize也将发生拒绝的人为最大队列大小（默认为5，会使得maxQueueSize“失效”）
#      keepAliveTimeMinutes: 1 # 允许maximumSize生效时，定义“相对不活动”的时间，超过这时间，释放线程
#      allowMaximumSizeToDivergeFromCoreSize: true # 此属性允许maximumSize的配置生效

# Spring Cloud 性能指标, 监控
#management:
#  endpoints:
#    web:
#      exposure:
#        include: '*'
#  endpoint:
#    health:
#      show-details: ALWAYS
#  metrics:
#    tags:
#      application: ${spring.application.name}

# Spring Cloud 注册中心
#eureka:
#  instance:
#    prefer-ip-address: true
#  client:
#    registerWithEureka: false
#    fetchRegistry: true
#    service-url:
#      defaultZone: http://192.168.21.141:${eureka.port:8761}/eureka/ #5


# 自定义配置, 获取方式: @Value("${excel.max.size} private int excelMaxSize;")
#excel:
#  max:
#    size: 20000
