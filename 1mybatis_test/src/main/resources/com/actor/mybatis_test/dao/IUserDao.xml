<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dto/mybatis-3-mapper.dtd">

<mapper namespace="com.actor.mybatis_test.dao.IUserDao">

    <!-- 配置查询结果的列名和实体类的属性名的对应关系 -->
    <!-- id: 唯一标志.  type: 查询的类型, user / uSeR / USER/ com.xx.domain.User 见 SqlMapConfig.xml 中的 别名配置(typeAliases) -->
    <resultMap id="userMap" type="com.actor.mybatis_test.domain.User">
        <!-- 主键字段的对应, 如果实体是 userId, 对应的数据库是 id, 需要这样配 -->
        <id property="userId" column="id"/>
        <!-- 非主键字段的对应 -->
        <result property="userAge" column="age"/>
        <result property="userName" column="username"/>
        <result property="userAddress" column="address"/>
        <result property="userSex" column="sex"/>
        <result property="userBirthday" column="birthday"/>
    </resultMap>


    <!-- 配置查询所有-->
    <!--<select id="findAll" resultType="com.actor.mybatis_test.domain.User">-->
    <select id="findAll" resultMap="userMap">
        select * from user
    </select>

    <!-- 保存User -->
    <insert id="saveUser" parameterType="com.actor.mybatis_test.domain.User">
        insert into user(username, address, sex, birthday) values (#{username}, #{address}, #{sex}, #{birthday});
    </insert>

    <!-- 保存User, 返回id -->
    <insert id="saveUserReturnId1" parameterType="com.actor.mybatis_test.domain.User">
        <!-- keyProperty: 实体类对应的主键名称
             keyColumn: 数据库的id(对应表).
             order: 取值为 AFTER 代表插入后的行为
                1.查询id的这条语句不能单独用, 要插入后再用, 否则返回0
                2.返回的自增对象（以ID为例）必须是int类型的，否则会返回的都是“0”(待验证???)
            -->
        <selectKey keyProperty="id" keyColumn="id" resultType="int" order="AFTER">
            <!-- 必须先插入数据, 才能返回插入数据的id, 否则返回0 -->
            select last_insert_id()
        </selectKey>
        insert into user(username, address, sex, birthday) values(#{username}, #{address}, #{sex}, #{birthday});
    </insert>

    <!-- 当参数有 @Param 注解 -->
    <insert id="saveUserReturnId2" parameterType="com.actor.mybatis_test.domain.User">
        <selectKey keyProperty="user.userId" keyColumn="id" order="AFTER" resultType="int">
            select last_insert_id()
        </selectKey>
        insert into user(username, address, sex, birthday) values(#{user.userName}, #{user.userAddress}, #{user.userSex}, #{user.userBirthday});
    </insert>

    <!-- 2.返回的id类型可以是任意类型??? 待验证
        useGeneratedKeys：开启自增
        keyProperty：自增返回数据名称 -->
    <insert id="saveUserReturnId3" parameterType="com.actor.mybatis_test.domain.User"
            useGeneratedKeys="true" keyProperty="id">
        insert into user(username, address, sex, birthday) values(#{username}, #{address}, #{sex}, #{birthday});
    </insert>

    <!-- 更新User -->
    <update id="updateUser" parameterType="com.actor.mybatis_test.domain.User">
        update user set username=#{username}, address=#{address}, sex=#{sex}, birthday=#{birthday} WHERE id=#{id}
    </update>

    <!-- 删除User, parameterType(int支持3种写法): int, INT, Integer, java.lang.Integer -->
    <delete id="deleteUser" parameterType="Integer">
        <!-- 只有1个参数, #{}内可随意写 -->
        delete from user where id = #{iaaa};
    </delete>

    <select id="findById" parameterType="Integer" resultMap="userMap">
        select * from user WHERE id = #{id}
    </select>

    <!-- parameterType(string支持2种写法): string, java.lang.String -->
    <select id="findByName1" parameterType="string" resultMap="userMap">
        select * from user where username like #{name};
    </select>

    <!-- 根据名称模糊查询User2(了解, 不这样用, 防止sql注入) -->
    <select id="findByName2" parameterType="string" resultMap="userMap">
        <!-- %${value}% 注意: 将模糊查询的匹配符%写到配置文件时, 就用到一个固定写法 ${value}, value不能改成其它任意字母 -->
        select * from user where username like '%${value}%';
    </select>

    <select id="findTotal" resultType="int">
        select count(1) from user;
    </select>

    <!-- 根据 queryVo 的条件查询用户 -->
    <select id="findUserByVo" parameterType="com.actor.mybatis_test.vo.QueryVo" resultMap="userMap">
        select * from user where username like #{user.userName};
    </select>
</mapper>