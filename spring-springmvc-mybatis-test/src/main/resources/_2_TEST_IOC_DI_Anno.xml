<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

    <!--https://www.bilibili.com/video/BV1mE411X7yp?p=104
        注解方式注入
        -->

    <!-- 告知spring在创建容器时要扫描的包, 配置所需要的标签是一个名为 context 命名空间和约束中:
         xmlns:context="http://www.springframework.org/schema/context" -->
    <context:component-scan base-package="com.actor.ssmtest"></context:component-scan>

    <!--将对象注入到Spring容器中:
            1.id            : 和name 应该差不多作用?
            2.name          :
            3.scope(作用范围):
                3.1.singleton     : 单例(默认值), spring容器中只包含1份bean的实例
                3.2.prototype     : 多例
                3.3.request       : 作用于web引用的请求范围
                3.4.session       : 作用于web应用的会话范围
                3.5.global-session: 作用于web集群环境的会话范围(全局会话范围), 当不是集群环境时, 它就是session

            https://www.bilibili.com/video/BV1mE411X7yp?p=97
            4.init-method   : 单例时, 初始化, 当容器创建时这个对象时
            5.destroy-method: 单例时, 容器销毁时调用这个方法
    -->
    <!-- 配置Dao -->
    <bean id="customerDao" name="customerDao"
          class="com.actor.ssmtest.dao.impl.CustomerDaoImpl"
          scope="singleton"
          init-method="initMethod"
          destroy-method="destroyMethod"/>
    <bean name="linkManDao" class="com.actor.ssmtest.dao.impl.LinkManDaoImpl"/>
    <bean name="userDao" class="com.actor.ssmtest.dao.impl.UserDaoImpl"/>


    <!--https://www.bilibili.com/video/BV1mE411X7yp?p=98
        依赖注入(Dependency Injection):
        依赖关系的维护, 就称之为依赖注入.
        能注入的数据: 3类
            1.基本类型&String
            2.其它bean类型(在配置文件中 or 注解配置过过的bean)
            3.复杂类型/集合类型
        注入的方式: 3种
            1.构造函数
            2.set方法
            3.注解
        -->
    <!--https://www.bilibili.com/video/BV1mE411X7yp?p=99
        构造函数注入(不推荐)
            type : 参数的类型                      (有可能有多个相同type, 所以一般不用这个属性)
            index: 给构造函数的第几个参数赋值, 从0开始(要记第几个参数, 所以一般不用这个属性)
            name : 给构造函数中指定名称的参数赋值
            value: 提供基本类型和String类型的值
            ref  : 指定其它的bean类型(spring容器中的bean对象)
        1.优势: 获取bean对象时, 注入数据是必须的操作, 否则对象无法创建
        2.弊端: 改变了bean对象的实例化方式, 使我们在创建对象时, 如果用不到这些数据, 也必须提供.
        -->
    <bean id="customer1" class="com.actor.ssmtest.domain.Customer1">
        <constructor-arg name="name" value="张三"/>
        <constructor-arg name="age" value="23"/>
        <constructor-arg name="birthday" ref="dateNow"/>
    </bean>
    <!--配置日期对象: Spring读取class类名, 反射创建对象, 存入Spring核心容器中-->
    <bean id="dateNow" class="java.util.Date"/>


    <!--https://www.bilibili.com/video/BV1mE411X7yp?p=100
        set方法注入(更常用)
            name : 指定注入时所调用的set方法名称
            value: 提供基本类型和String类型的值
            ref  : 指定其它的bean类型(spring容器中的bean对象)
        1.优势: 创建对象时没有明确的限制, 可直接使用默认构造函数
        2.弊端: 如果有某个成员必须有值, 则获取对象时有可能set方法没有执行.
        -->
    <bean id="customer2" class="com.actor.ssmtest.domain.Customer2">
        <property name="userName" value="李四"/>
        <property name="age" value="24"/>
        <property name="birthday" ref="dateNow"/>
        <!--数组: 给 Array 数据注入的标签可以是:<array>, <list>, <set>-->
        <property name="array">
            <array>
                <value>Array1</value>
                <value>Array2</value>
            </array>
        </property>
        <!--List: 给 List 数据注入的标签可以是:<array>, <list>, <set>-->
        <property name="list">
            <list>
                <value>List1</value>
                <value>List2</value>
            </list>
        </property>
        <!--Set: 给 Set 数据注入的标签可以是:<array>, <list>, <set>-->
        <property name="set">
            <set>
                <value>Set1</value>
                <value>Set2</value>
            </set>
        </property>
        <!--Map: 给 Map 数据注入的标签可以是:<map>, <props>-->
        <property name="map">
            <map>
                <entry key="key1" value="Value1"></entry> <!--value属性-->
                <entry key="key2">
                    <value>Value2</value>                 <!-- <value>标签也可以 -->
                </entry>
            </map>
        </property>
        <!--Property: 给 Property 数据注入的标签可以是:<map>, <props>-->
        <property name="property">
            <props>
                <prop key="prop1">AAA</prop>
                <prop key="prop2">BBB</prop>
            </props>
        </property>
    </bean>


    <!-- 配置Service -->
    <bean name="customerService" class="com.actor.ssmtest.service.impl.CustomerServiceImpl">
        <property name="customerDao" ref="customerDao"></property>
    </bean>
    <bean name="linkManService" class="com.actor.ssmtest.service.impl.LinkManServiceImpl">
        <property name="cd" ref="customerDao"></property>
        <property name="lmd" ref="linkManDao"></property>
    </bean>
    <bean name="userService" class="com.actor.ssmtest.service.impl.UserServiceImpl">
        <property name="ud" ref="userDao"></property>
    </bean>
</beans>