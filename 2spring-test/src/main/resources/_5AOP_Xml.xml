<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
         http://www.springframework.org/schema/context
          http://www.springframework.org/schema/context/spring-context.xsd
           http://www.springframework.org/schema/aop
            http://www.springframework.org/schema/aop/spring-aop.xsd">

    <bean id="aop_Bean" class="com.actor.ssmtest._5AOP_Xml.Aop_Bean"/>

    <!-- 1.Logger: 每个方法执行前, 先打印个日志, 里面有个 beforePrintLog()方法 -->
    <bean id="logger" class="com.actor.ssmtest._5AOP_Xml.AOP_Logger_Xml"/>

    <!-- spring中基于 XML 的 AOP 配置步骤:
        1.把通知 Bean也交给spring来管理
        2.使用 <aop:config 标签表明 AOP 的配置
        3.使用 <aop:aspect 标签表明 配置切面
            id 属性: 给切面提供一个唯一标识
            ref 属性: 指定通知类bean的id
        4.在 <aop:aspect 标签的内部使用对应标签来配置通知的类型
            我们现在是让 Logger.beforePrintLog()方法在切入点方法执行之前, 所以是前置通知:
            <aop:before  前置通知
                method 属性: 指定 Logger 类中哪个方法是前置通知
                pointcut 属性: 指定切入点表达式, 对业务层中哪些方法增强
                切入点表达式写法:
                    关键字: execution(表达式)
                        1.表达式:
                            [访问修饰符] 返回类型 包名.包名.包名.类名.方法名(参数列表)   //修饰符可省略
                        标准的表达式示例(只针对某个方法):
                            public void com.xxx.service.impl.AccountServiceImpl.saveAccount()
                        修饰符可省略:
                            void com.xxx.service.impl.AccountServiceImpl.saveAccount()
                        返回值可以使用通配符, 表示任意返回值:
                            * com.xxx.service.impl.AccountServiceImpl.saveAccount()
                        包名可以使用通配符, 表示任意包. 但是有几级包, 就要写几个*.   :
                            * *.*.*.*.AccountServiceImpl.saveAccount()
                        包名可以使用..表示当前包及其子包:
                            * *..AccountServiceImpl.saveAccount()
                        类名&方法名 都可以使用*来实现通配:
                            * *..*.*()
                        参数列表:
                            可以直接写数据类型:
                                基本类型直接写名称 : * *..*.*(int)
                                引用类型写包名.类型的方式: * *..*.*(java.lang.String)
                             可以使用*通配符表示任意类型, 但必须有参数: * *..*.*(*)
                             可以使用..表示'有无参数'均可, 有参数可以是任意类型: * *..*.*(..)

                        2.全通配写法 示例: execution(* *..*.*(..))
                        3.实际开发中切入点表达式的通常写法: 切到业务层实现类下的所有方法
                            execution(* com.actor.ssmtest.service.impl.*.*(..))
                        -->
    <!-- 配置AOP -->
    <aop:config>
        <!-- 通用化切入点表达式: https://www.bilibili.com/video/BV1mE411X7yp?p=138 -->
        <!-- 写在 <aop:aspect 标签内部只能当前切面使用, 还可以写在 aop:aspect 外面, 此时就变成了所有切面可用 -->
        <!-- 且必须写在 <aop:aspect 之前(标签约束规定) -->
        <aop:pointcut id="pt2" expression="execution(* com.actor.ssmtest.controller.*.*(..))"/>
        <aop:pointcut id="pt1" expression="execution(* com.actor.ssmtest._5AOP_Xml.*.*(..))"/>

        <!-- 配置切面 -->
        <aop:aspect id="logAdvice" ref="logger">
            <!-- 1.配置"前置通知", 在方法"执行前"执行 beforePrintLog()方法 -->
                <!-- pointcut属性: 只针对某个方法 -->
<!--            <aop:before method="beforePrintLog" pointcut="execution(* com.actor.ssmtest.domain.*.*(..))"/>-->

            <!-- 四种常用通知类型: https://www.bilibili.com/video/BV1mE411X7yp?p=137 -->
            <!-- 1.1.实际中可以使用引用 -->
            <aop:before method="beforePrintLog" pointcut-ref="pt1"/>

            <!-- 2.配置"后置通知", 在方法"执行完后"执行 afterPrintLog()方法, 和异常通知永远只能执行一个 -->
            <aop:after-returning method="afterPrintLog" pointcut-ref="pt1"/>

            <!-- 3.配置"异常通知", 在方法"执行过程中出现异常后"执行 afterThrowingLog()方法, 和后置通知永远只能执行一个 -->
            <aop:after-throwing method="afterThrowingLog" pointcut-ref="pt1"/>

            <!-- 4.配置"最终通知", 无论切入点方法是否正常执行, 它都会在其后面执行 afterFinallyPrintLog()方法 -->
            <aop:after method="afterFinallyPrintLog" pointcut-ref="pt1"/>

            <!-- 写在 aop:aspect 标签内部只能当前切面使用, 还可以写在 aop:aspect 外面, 此时就变成了所有切面可用 -->
<!--            <aop:pointcut id="pt1" expression="execution(* com.actor.ssmtest.domain.*.*(..))"/>-->


            <!-- spring中的"环绕通知": https://www.bilibili.com/video/BV1mE411X7yp?p=139 -->
            <aop:around method="aroundPrintLog" pointcut-ref="pt2"/>
        </aop:aspect>
    </aop:config>
</beans>